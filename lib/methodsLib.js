// Generated by CoffeeScript 1.10.0
(function() {
  var CWD, exec, fs, methods;

  fs = require('fs');

  exec = require('child_process').exec;

  CWD = process.cwd();

  methods = {
    generatePM2Settings: function(opts, generateBundle) {
      var appTemplate, pm2Filename, pm2Json, settingsObj;
      pm2Json = {
        apps: []
      };
      appTemplate = {
        name: null,
        script: "./bundle/main.js",
        exec_mode: "fork_mode",
        env: {
          "PORT": null,
          "MONGO_URL": null,
          "ROOT_URL": null,
          "METEOR_SETTINGS": {}
        }
      };
      pm2Filename = "pm2-env.json";
      appTemplate.name = opts.appname;
      appTemplate.env["PORT"] = opts.port;
      appTemplate.env["MONGO_URL"] = opts.mongo;
      appTemplate.env["ROOT_URL"] = opts.url;
      if (opts.instances > 1) {
        appTemplate.exec_mode = "cluster_mode";
        appTemplate.instances = opts.instances;
      }
      if (opts.settings && opts.settings.trim() !== "") {
        settingsObj = JSON.parse(fs.readFileSync("" + opts.settings, 'utf8'));
        if (settingsObj != null) {
          appTemplate.env["METEOR_SETTINGS"] = settingsObj;
        }
      }
      pm2Json.apps.push(appTemplate);
      fs.writeFileSync(pm2Filename, JSON.stringify(pm2Json, null, 2));
      if (generateBundle) {
        return this.generateNodeBundle(generateBundle, pm2Filename);
      } else {
        return this.goodBye(pm2Filename);
      }
    },
    generateNodeBundle: function(dirName, settingsFile) {
      var self;
      self = this;
      console.log("BUILDING NODEJS BUNDLE TO " + dirName + " ...");
      return exec("cd " + CWD + " && meteor build --directory " + dirName, function(err, stderr, stdout) {
        if (err) {
          console.log(err);
        }
        console.log(stderr + stdout);
        console.log("COPYING " + settingsFile + " ...");
        return exec("cd " + CWD + " && cp " + settingsFile + " " + dirName, function(err, stderr, stdout) {
          if (err) {
            console.log(err);
          }
          console.log(stderr + stdout);
          return self.goodBye(settingsFile, dirName);
        });
      });
    },
    checkIfMeteorApp: function() {
      var error, result, stats;
      console.log("CHECKING IF CWD IS METEOR APP");
      result = false;
      try {
        stats = fs.lstatSync(CWD + '/.meteor');
        if (stats.isDirectory()) {
          return result = true;
        }
      } catch (error1) {
        error = error1;
        result = false;
        throw new Error("THIS IS NOT A METEOR APP!");
      } finally {
        return result;
      }
    },
    goodBye: function(fileName, bundleDir) {
      if (fileName) {
        if (bundleDir) {
          console.log("GENERATED NODE BUNDLE " + bundleDir + " AND " + fileName);
          console.log("PLEASE INSTALL DEPS BY YOURSELF `cd " + bundleDir + "/bundle/programs/server && npm i`");
          console.log("RUN APP WITH IN " + bundleDir + " WITH `pm2 start " + fileName + "`");
        } else {
          console.log("GENERATED " + fileName);
          console.log("now generate a node bundle `meteor build --directory .build && cp " + fileName + " .build/`");
          console.log("then install deps `cd .build/bundle/programs/server && npm i`");
          console.log("finally go to .build and start app with `pm2 start " + fileName + "`");
        }
        return console.log("BYE");
      }
    }
  };

  module.exports = methods;

}).call(this);
