// Generated by CoffeeScript 1.10.0
(function() {
  var CWD, cli, defaultAppname, exec, fs, methods, nodemiral, path, prompt;

  fs = require('fs');

  exec = require('child_process').exec;

  nodemiral = require('nodemiral');

  path = require('path');

  prompt = require('prompt');

  cli = require('cli');

  CWD = function() {
    return process.cwd();
  };

  defaultAppname = path.basename(CWD());

  methods = {
    configWizzard: function(opts, cb) {
      var promptQuestions;
      prompt.message = "pm2-meteor";
      prompt.start();
      promptQuestions = [];
      if (!opts.appname) {
        promptQuestions.push({
          name: "appname",
          type: "string",
          description: "Name of your App",
          "default": defaultAppname
        });
      }
      if (!opts.settings) {
        promptQuestions.push({
          name: "settings",
          type: "string",
          description: "Meteor settings file"
        });
      }
      if (!opts.url) {
        promptQuestions.push({
          name: "url",
          type: "string",
          description: "ROOT URL your app will run on",
          required: true,
          message: "You must enter a Root URL"
        });
      }
      if (!opts.port) {
        promptQuestions.push({
          name: "port",
          type: "number",
          description: "Port your app should run on",
          "default": 3000
        });
      }
      if (!opts.mongo) {
        promptQuestions.push({
          name: "mongo",
          type: "string",
          description: "MongoDB URL",
          required: true,
          message: "You must enter a MongoDB URL"
        });
      }
      if (!opts.instances) {
        promptQuestions.push({
          name: "instances",
          type: "number",
          description: "How much instances to run?",
          "default": 1
        });
      }
      return prompt.get(promptQuestions, function(err, res) {
        var cbRes, key, value;
        if (err) {
          return cb(err, null);
        } else {
          cbRes = opts;
          for (key in res) {
            value = res[key];
            cbRes[key] = value;
          }
          return cb(null, cbRes);
        }
      });
    },
    generatePM2Settings: function(opts, generateBundle) {
      var appTemplate, pm2Filename, pm2Json, settingsObj;
      pm2Json = {
        apps: []
      };
      appTemplate = {
        name: null,
        script: "./bundle/main.js",
        exec_mode: "fork_mode",
        env: {
          "PORT": null,
          "MONGO_URL": null,
          "ROOT_URL": null,
          "METEOR_SETTINGS": {}
        }
      };
      pm2Filename = "pm2-env.json";
      appTemplate.name = opts.appname;
      appTemplate.env["PORT"] = opts.port;
      appTemplate.env["MONGO_URL"] = opts.mongo;
      appTemplate.env["ROOT_URL"] = opts.url;
      if (opts.instances > 1) {
        appTemplate.exec_mode = "cluster_mode";
        appTemplate.instances = opts.instances;
      }
      if (opts.settings && opts.settings.trim() !== "") {
        settingsObj = JSON.parse(fs.readFileSync("" + opts.settings, 'utf8'));
        if (settingsObj != null) {
          appTemplate.env["METEOR_SETTINGS"] = settingsObj;
        }
      }
      pm2Json.apps.push(appTemplate);
      fs.writeFileSync(pm2Filename, JSON.stringify(pm2Json, null, 2));
      if (generateBundle) {
        return this.generateNodeBundle(generateBundle, pm2Filename);
      } else {
        return this.goodBye(pm2Filename);
      }
    },
    generateNodeBundle: function(dirName, settingsFile, cb) {
      cli.info("Building Node Bundle");
      return exec("cd " + (CWD()) + " && meteor build --directory " + dirName, function(err, stderr, stdout) {
        if (err) {
          cli.fatal(err);
        }
        console.log(stderr + stdout);
        cli.info("Copying " + settingsFile + " into Node Bundle");
        return exec("cd " + (CWD()) + " && cp " + settingsFile + " " + dirName, function(err, stderr, stdout) {
          if (err) {
            cli.fatal(err);
          }
          console.log(stderr + stdout);
          cli.ok("Done building Node Bundle under " + dirName);
          if (cb) {
            return cb();
          }
        });
      });
    },
    shippNodeBundle: function(bundleDir, settingsFile) {
      return this.generateNodeBundle(bundleDir, settingsFile, function() {
        return exec("scp -rp " + bundleDir + " root@betawerk.co:/opt/pm2-meteor/" + bundleDir, function(err, stderr, stdout) {
          cli.fatal(err);
          console.log(stderr + stdout);
          return cli.ok("Deployed your App real quick!");
        });
      });
    },
    checkIfMeteorApp: function() {
      var error, error1, result, stats;
      cli.info("Checking if Meteor App");
      result = false;
      try {
        stats = fs.lstatSync(CWD() + '/.meteor');
        if (stats.isDirectory()) {
          return result = true;
        }
      } catch (error1) {
        error = error1;
        result = false;
        return cli.fatal("This is not a Meteor Application");
      } finally {
        return result;
      }
    },
    goodBye: function(generatedConfig, deployedBundle) {
      if (deployed) {
        cli.ok("Shipped your Application to /opt/pm2-meteor/" + deployedBundle + "!");
      }
      if (generatedConfig) {
        return cli.ok("Generated " + generatedConfig);
      }
    }
  };

  module.exports = methods;

}).call(this);
