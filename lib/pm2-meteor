#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var CWD, cli, defaultAppname, exec, fs, methods, opts, path, prompt, promptQuestions, readline;

  exec = require('child_process').exec;

  fs = require('fs');

  readline = require('readline');

  path = require('path');

  prompt = require('prompt');

  cli = require('cli');

  methods = require('./methodsLib');

  CWD = process.cwd();

  defaultAppname = path.basename(CWD);

  opts = cli.parse({
    appname: [false, "Name of your app", 'string'],
    settings: ['s', "Meteor settings file", 'path'],
    url: ['u', "ROOT URL your app will run on", 'string'],
    port: ['p', "Port your app should run on", 'number'],
    mongo: ['m', "MongoDB URL", 'string'],
    instances: ['i', "How much instances to run?", 'number']
  });

  methods.checkIfMeteorApp();

  prompt.message = "pm2-meteor";

  prompt.start();

  promptQuestions = [];

  if (!opts.appname) {
    promptQuestions.push({
      name: "appname",
      type: "string",
      description: "Name of your App",
      "default": defaultAppname
    });
  }

  if (!opts.settings) {
    promptQuestions.push({
      name: "settings",
      type: "path",
      description: "Meteor settings file"
    });
  }

  if (!opts.url) {
    promptQuestions.push({
      name: "url",
      type: "string",
      description: "ROOT URL your app will run on",
      required: true,
      message: "You must enter a Root URL"
    });
  }

  if (!opts.port) {
    promptQuestions.push({
      name: "port",
      type: "number",
      description: "Port your app should run on",
      "default": 3000
    });
  }

  if (!opts.mongo) {
    promptQuestions.push({
      name: "mongo",
      type: "string",
      description: "MongoDB URL",
      required: true,
      message: "You must enter a MongoDB URL"
    });
  }

  if (!opts.instances) {
    promptQuestions.push({
      name: "instances",
      type: "number",
      description: "How much instances to run?",
      "default": 1
    });
  }

  prompt.get(promptQuestions, function(err, res) {
    var key, value;
    if (err) {
      throw new Error(err);
    }
    if (res) {
      for (key in res) {
        value = res[key];
        opts[key] = value;
      }
      return methods.generatePM2Settings(opts);
    }
  });

}).call(this);
